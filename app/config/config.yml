imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml } 
    - { resource: @AppBundle/Resources/config/admin.yml }
    - { resource: sonata/sonata_admin.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

    base_template_class: Sonata\CacheBundle\Twig\TwigTemplate14

    form:
        resources:
            - 'SonataFormatterBundle:Form:formatter.html.twig'
            - 'SonataMediaBundle:Form:media_widgets.html.twig'
            - 'SonataCoreBundle:Form:datepicker.html.twig'

    exception_controller: 'FOS\RestBundle\Controller\ExceptionController::showAction'

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sonata_user:
    security_acl: false
    manager_type: orm # can be orm or mongodb
    
#    impersonating:
#        route:                page_slug
#        parameters:           { path: / }
        
    class:
        user:         Application\Sonata\UserBundle\Entity\User
        group:        Application\Sonata\UserBundle\Entity\Group

    google_authenticator:
        enabled: true
        server:  yourserver.com
    
    #profile:
    #    dashboard:
    #        blocks:
    #            - { position: left, type: sonata.block.service.text, settings: { content: "<h2>Welcome!</h2> <p>This is a sample user profile dashboard, feel free to override it in the configuration! Want to make this text dynamic? For instance display the user's name? Create a dedicated block and edit the configuration!</p>"} }
                #- { position: left, type: sonata.order.block.recent_orders, settings: { title: Recent Orders, number: 5, mode: public }}
                #- { position: right, type:   sonata.timeline.block.timeline, settings: { max_per_page: 15 }}
                #- { position: right, type: sonata.news.block.recent_posts, settings: { title: Recent Posts, number: 5, mode: public }}
                #- { position: right, type: sonata.news.block.recent_comments, settings: { title: Recent Comments, number: 5, mode: public }}
#        menu:
#            - { route: 'sonata_user_profile_show', label: 'sonata_profile_title', domain: 'SonataUserBundle'}
#            - { route: 'sonata_user_profile_edit', label: 'link_edit_profile', domain: 'SonataUserBundle'}
#            #- { route: 'sonata_customer_addresses', label: 'link_list_addresses', domain: 'SonataCustomerBundle'}
#            #- { route: 'sonata_order_index', label: 'order_list', domain: 'SonataOrderBundle'}
#        form:
#            type:                 sonata_user_profile
#            handler:              sonata.user.profile.form.handler.default
#            name:                 sonata_user_profile_form
#            validation_groups:
#                # Defaults:
#                - Profile
#                - Default

sonata_block:
    context_manager: sonata.page.block.context_manager
    default_contexts: [sonata_page_bundle]

    http_cache:
        listener: true

   

    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.admin.block.search_result:
            contexts:   [admin]
#
#        #sonata.admin_doctrine_orm.block.audit:
#        #    contexts:   [admin]
#
#        # Builtin Block
        sonata.block.service.text:
#        sonata.block.service.container:
#        sonata.block.service.rss:
#        sonata.block.service.menu:
#        sonata.block.service.template:
#
#        # PageBundle's Blocks
#        sonata.page.block.container:
#            # cache: sonata.cache.memcached
#            # cache: sonata.cache.predis
#            # cache: sonata.page.cache.esi # if you are using the PageBundle
#            # cache: sonata.block.cache.esi # if you are using the BlockBundle without the PageBundle
#        sonata.page.block.children_pages:
#        sonata.page.block.breadcrumb:
#
#        # MediaBundle's Blocks
#        sonata.media.block.media:
#        sonata.media.block.gallery:
#        sonata.media.block.feature_media:
            
        
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        

fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                  
        # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)
        
    profile: 
     
        form:
            type:               fos_user_profile
            handler:            fos_user.profile.form.handler.default
            name:               fos_user_profile_form
            validation_groups:  [Authentication] # Please note : this is not the default value
            
    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

doctrine:

    dbal:
        types:
            json: Sonata\Doctrine\Types\JsonType

doctrine:
    orm:
        entity_managers:
            default:
                mappings:
                    SonataMediaBundle: ~

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

sonata_formatter:
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        text:
            service: sonata.formatter.text.text
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig
        rawhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig
        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

    ckeditor:
        templates:
            browser: 'SonataFormatterBundle:Ckeditor:browser.html.twig'
            upload: 'SonataFormatterBundle:Ckeditor:upload.html.twig'

sonata_page:
    multisite:             host # host
    use_streamed_response: false # set the value to false in debug mode or if the reverse proxy does not handle streamed response

    ignore_uri_patterns:
        - ^/admin(.*)
        - ^/api/(.*)

    ignore_route_patterns:
        - (.*)admin(.*)     # ignore admin route, ie route containing 'admin'
        - ^_(.*)            # ignore symfony routes

    ignore_routes:
        - sonata_page_cache_esi
        - sonata_page_cache_ssi
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    cache_invalidation:
        service:  sonata.page.cache.invalidation.simple
        recorder: sonata.page.cache.recorder
        classes:
            "Application\Sonata\PageBundle\Entity\Block": getId

    assets:
        stylesheets:
            - assetic/sonata_front_css.css

        javascripts:
            - assetic/sonata_front_js.js

    default_template: default
    templates:
        default:
            path: 'ApplicationSonataPageBundle::demo_layout.html.twig'
            name: 'default'
            containers:
                 header:
                     name: Header
                 content_top:
                     name: Top content
                 content:
                     name: Main content
                 content_bottom:
                     name: Bottom content
                 footer:
                     name: Footer
            matrix:
                 layout: |
                     HHHHHHHH
                     TTTTTTTT
                     CCCCCCCC
                     BBBBBBBB
                     FFFFFFFF

                 mapping:
                     H: header
                     T: content_top
                     C: content
                     B: content_bottom
                     F: footer

        2columns:
            path: 'ApplicationSonataPageBundle::demo_2columns_layout.html.twig'
            name: '2 columns layout'
            containers:
                 header:
                     name: Header
                 content_top:
                     name: Top content
                 left_col:
                     name: Left content
                 right_col:
                     name: Right content
                 content_bottom:
                     name: Bottom content
                 footer:
                     name: Footer
            matrix:
                 layout: |
                     HHHHHHHH
                     TTTTTTTT
                     LLLLRRRR
                     BBBBBBBB
                     FFFFFFFF

                 mapping:
                     H: header
                     T: content_top
                     L: left_col
                     R: right_col
                     B: content_bottom
                     F: footer

    page_defaults:
        homepage: { decorate: false, enabled: true }

    caches:
        esi:
            token:    add an unique token here # default is a random value
            version:  3                        # version 3 is the default on debian wheezy ...
            servers:
                # you need to ajust this configuration to match your varnish configuration
                #- %sonata_page.varnish.command%
        ssi:
            token:    add an unique token here # default is a random value

    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error

# Enable Doctrine to map the provided entities
doctrine:
    orm:
        entity_managers:
            default:
                mappings:
                    ApplicationSonataPageBundle: ~
                    SonataPageBundle: ~
